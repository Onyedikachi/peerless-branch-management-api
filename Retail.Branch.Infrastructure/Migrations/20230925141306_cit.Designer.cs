// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using Retail.Branch.Infrastructure;

#nullable disable

namespace Retail.Branch.Infrastructure.Migrations
{
    [DbContext(typeof(BranchDataContext))]
    [Migration("20230925141306_cit")]
    partial class cit
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.21")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("Retail.Branch.Core.Entities.Branch", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("City")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<string>("Country")
                        .HasColumnType("text");

                    b.Property<DateTime>("Created_At")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Created_By")
                        .HasColumnType("text");

                    b.Property<Guid?>("Created_By_BranchId")
                        .HasColumnType("uuid");

                    b.Property<string>("Created_By_Id")
                        .HasColumnType("text");

                    b.Property<bool>("Deleted")
                        .HasColumnType("boolean");

                    b.Property<DateTime?>("Deleted_At")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Deleted_By_Id")
                        .HasColumnType("text");

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<bool>("IsLocked")
                        .HasColumnType("boolean");

                    b.Property<string>("Lga")
                        .HasColumnType("text");

                    b.Property<string>("LocationRef")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("Number")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("PostalCode")
                        .HasColumnType("text");

                    b.Property<string>("State")
                        .HasColumnType("text");

                    b.Property<char>("Status")
                        .HasColumnType("character(1)");

                    b.Property<string>("StreetName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Treated_By")
                        .HasColumnType("text");

                    b.Property<string>("Treated_By_Branch_Id")
                        .HasColumnType("text");

                    b.Property<string>("Treated_By_Id")
                        .HasColumnType("text");

                    b.Property<DateTime>("Updated_At")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.ToTable("Branches");

                    b.HasData(
                        new
                        {
                            Id = new Guid("f7c8559f-f718-4b16-aa59-41a5d6c718d2"),
                            City = "Lagos",
                            Code = "HQ",
                            Created_At = new DateTime(2023, 8, 10, 7, 53, 27, 748, DateTimeKind.Utc).AddTicks(3612),
                            Created_By_Id = "00000000-0000-0000-0000-000000000000",
                            Deleted = false,
                            Description = "Sterling Bank Head Quaters",
                            IsLocked = true,
                            Name = "Sterling Bank Head Office ",
                            Number = "20",
                            PostalCode = "P.M.B. 12735",
                            State = "Lagos",
                            Status = 'A',
                            StreetName = "Sterling Towers, Marina",
                            Updated_At = new DateTime(2023, 8, 10, 7, 53, 27, 748, DateTimeKind.Utc).AddTicks(3612)
                        });
                });

            modelBuilder.Entity("Retail.Branch.Core.Entities.BranchBranchRequest", b =>
                {
                    b.Property<Guid>("BranchRequestsId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("BranchesId")
                        .HasColumnType("uuid");

                    b.Property<string>("Document")
                        .HasColumnType("text");

                    b.Property<string>("Meta")
                        .HasColumnType("text");

                    b.HasKey("BranchRequestsId", "BranchesId");

                    b.HasIndex("BranchesId");

                    b.ToTable("BranchBranchRequest");
                });

            modelBuilder.Entity("Retail.Branch.Core.Entities.BranchMember", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("BranchId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("Created_At")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Created_By")
                        .HasColumnType("text");

                    b.Property<string>("Created_By_Id")
                        .HasColumnType("text");

                    b.Property<bool>("Deleted")
                        .HasColumnType("boolean");

                    b.Property<DateTime?>("Deleted_At")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Deleted_By_Id")
                        .HasColumnType("text");

                    b.Property<DateTime>("Updated_At")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("User_Id")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("User_Name")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.HasKey("Id");

                    b.HasIndex("BranchId");

                    b.ToTable("BranchMembers");
                });

            modelBuilder.Entity("Retail.Branch.Core.Entities.BranchRequest", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Alt_Description")
                        .HasColumnType("text");

                    b.Property<string>("Alt_Name")
                        .HasColumnType("text");

                    b.Property<Guid?>("CreatedByBranchId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("Created_At")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Created_By")
                        .HasColumnType("text");

                    b.Property<string>("Created_By_Id")
                        .HasColumnType("text");

                    b.Property<bool>("Deleted")
                        .HasColumnType("boolean");

                    b.Property<DateTime?>("Deleted_At")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Deleted_By_Id")
                        .HasColumnType("text");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Meta")
                        .HasColumnType("text");

                    b.Property<string>("Reason")
                        .HasColumnType("text");

                    b.Property<string>("Request_Type")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Treated_By")
                        .HasColumnType("text");

                    b.Property<string>("Treated_By_Branch_Id")
                        .HasColumnType("text");

                    b.Property<string>("Treated_By_Id")
                        .HasColumnType("text");

                    b.Property<DateTime>("Updated_At")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.ToTable("BranchRequests");
                });

            modelBuilder.Entity("Retail.Branch.Core.Entities.BranchRequestLog", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid?>("BranchId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("BranchRequestId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("Created_At")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Created_By")
                        .HasColumnType("text");

                    b.Property<string>("Created_By_Id")
                        .HasColumnType("text");

                    b.Property<bool>("Deleted")
                        .HasColumnType("boolean");

                    b.Property<DateTime?>("Deleted_At")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Deleted_By_Id")
                        .HasColumnType("text");

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<DateTime>("Updated_At")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("BranchRequestId");

                    b.ToTable("BranchRequestLogs");
                });

            modelBuilder.Entity("Retail.Branch.Core.Entities.BranchBranchRequest", b =>
                {
                    b.HasOne("Retail.Branch.Core.Entities.BranchRequest", "BranchRequest")
                        .WithMany()
                        .HasForeignKey("BranchRequestsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Retail.Branch.Core.Entities.Branch", "Branches")
                        .WithMany()
                        .HasForeignKey("BranchesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("BranchRequest");

                    b.Navigation("Branches");
                });

            modelBuilder.Entity("Retail.Branch.Core.Entities.BranchMember", b =>
                {
                    b.HasOne("Retail.Branch.Core.Entities.Branch", "Branch")
                        .WithMany()
                        .HasForeignKey("BranchId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Branch");
                });

            modelBuilder.Entity("Retail.Branch.Core.Entities.BranchRequestLog", b =>
                {
                    b.HasOne("Retail.Branch.Core.Entities.BranchRequest", "BranchRequest")
                        .WithMany()
                        .HasForeignKey("BranchRequestId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("BranchRequest");
                });
#pragma warning restore 612, 618
        }
    }
}
